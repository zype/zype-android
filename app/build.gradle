buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
// TODO: Uncomment following line to use Fabric
//apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
}

android {
    def String majorKey = 'MAJOR_VERSION'
    def String minorKey = 'MINOR_VERSION'
    def String versionCodeKey = 'DEBUG_VERSION_CODE'
    def versionPropertiesFile = file('version.properties')
    def Properties versionProperties = readVersionProperties(versionPropertiesFile)

    def df = new SimpleDateFormat("yyyy-MM-dd HH:mmZ")
    def String date = df.format(new Date(System.currentTimeMillis()))

    def getDate = { ->
        def dateFormatted = new Date()
        def formattedDate = dateFormatted.format('yyyyMMdd')
        return formattedDate
    }

    def currentCodeVersion = versionProperties[versionCodeKey].toString().toInteger()
    def zypeTemplateVersion = "2.2.8"

    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    lintOptions {
//        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        jumboMode true
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode currentCodeVersion
        buildConfigField "String", "ZYPE_TEMPLATE_VERSION", "\"${zypeTemplateVersion}\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            setVersionNameSuffix(".${currentCodeVersion}")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def int newVersionCode = currentCodeVersion + 1
            versionProperties[versionCodeKey] = newVersionCode.toString()
            store(versionPropertiesFile, versionProperties)
            }
        debug {
            setVersionNameSuffix(".${currentCodeVersion} DEBUG [${date}]")
        }
    }

    flavorDimensions "main"
    productFlavors {
        zype {
            versionName zypeTemplateVersion
            applicationId 'com.zype.android.template'
            manifestPlaceholders = [ manifestApplicationId: "${applicationId}",
                                     onesignal_app_id: "",
                                     onesignal_google_project_number: 'REMOTE'
            ]
        }
        template {
            versionName '1.0.0'
            applicationId "com.zype.android"
            manifestPlaceholders = [ manifestApplicationId: "${applicationId}",
                                     // TODO: Provide valid app_id for OneSignal
                                     onesignal_app_id: '',
                                     onesignal_google_project_number: 'REMOTE'
            ]
        }
    }

    applicationVariants.all { variant ->
        def file = project.file("src/" + variant.getFlavorName() + "/res/raw/zype_app_configuration.json")
        def json = new JsonSlurper().parseText(file.text)
        variant.buildConfigField "Boolean", "ONESIGNAL", json.OneSignal
        variant.buildConfigField "Boolean", "AWS_PINPOINT", json.AWSPinpoint

        variant.outputs.all { output ->
            def outputNameNew = "Zype-Android" + "-" + variant.productFlavors.name + "-" + variant.buildType.name +
                    "-" + variant.productFlavors.versionName + "-" + getDate() + ".apk"
            outputFileName = outputNameNew
        }
    }
}

public def readVersionProperties(File from) {
    if (from.canRead()) {
        def Properties result = new Properties()
        result.load(new FileInputStream(from))
        return result
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

public def store(File to, Properties properties) {
    properties.store(to.newWriter(), null)
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:multidex:1.0.3'

    // Android Architecture Components

    // ViewModel
    def lifecycle_version = "1.1.1"
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    // Room
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    annotationProcessor "android.arch.persistence.room:compiler:$room_version"
    testImplementation "android.arch.persistence.room:testing:$room_version"


    implementation('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.4.1'
    implementation project(':CastCompanionLibrary')
//    compile 'com.google.android.libraries.cast.companionlibrary:ccl:2.9.1'

    // Support library

    //    def androidSupportVersion = "27.1.1"
    def androidSupportVersion = "28.0.0"
    implementation "com.android.support:appcompat-v7:$androidSupportVersion"
    implementation "com.android.support:design:$androidSupportVersion"
    implementation "com.android.support:support-v4:$androidSupportVersion"
    implementation "com.android.support:cardview-v7:$androidSupportVersion"
    implementation "com.android.support:recyclerview-v7:$androidSupportVersion"
    implementation "com.android.support:mediarouter-v7:$androidSupportVersion"
    implementation "com.android.support:support-media-compat:$androidSupportVersion"
    implementation "com.android.support:customtabs:$androidSupportVersion"

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    implementation 'com.squareup.okhttp:okhttp:2.6.0'
    implementation 'com.squareup:otto:1.3.8'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.ns-developer:tagcloudview:0.1.0'
    implementation 'com.google.android.exoplayer:exoplayer:r1.5.12'
    implementation 'com.onesignal:OneSignal:3.8.4@aar'

    implementation 'com.github.bumptech.glide:glide:4.7.1'

    implementation('com.github.ozodrukh:CircularReveal:2.0.1@aar') {
        transitive = true;
    }

    implementation 'com.google.android.gms:play-services-gcm:15.0.1'
    implementation 'com.google.android.gms:play-services-analytics:16.0.1'
    implementation 'com.google.android.gms:play-services-location:15.0.1'
    implementation 'com.google.android.gms:play-services-cast:16.0.1'

    // IMA SDK
    implementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.6.0'
    implementation 'com.google.android.gms:play-services-ads:15.0.1'

    // Google In-app billing
    implementation 'com.android.billingclient:billing:1.0'

    implementation files('libs/libAkamaiExoPlayerLoader.jar')
    implementation files('libs/libAndroidMediaAnalytics.jar')

    // AWS
    implementation 'com.amazonaws:aws-android-sdk-core:2.7.+'
    implementation 'com.google.android.gms:play-services-auth:15.0.1'
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.google.firebase:firebase-messaging:17.3.0'
    implementation 'com.amazonaws:aws-android-sdk-pinpoint:2.7.+'
    implementation('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') {
        transitive = true
    }
}

// Uncomment below line if using AWS Pinpoint
// apply plugin: 'com.google.gms.google-services'